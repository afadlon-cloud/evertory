// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  image         String?
  domain        String?   @unique  // User's personal domain (e.g., fadlon-family.evertory.com)
  tier          String    @default("free")  // free, basic, pro, premium
  photoCount    Int       @default(0)  // Current number of photos uploaded
  photoLimit    Int       @default(20)  // Photo limit based on tier
  subscriptionId String?  // Stripe subscription ID
  subscriptionStatus String?  // active, canceled, past_due, etc.
  subscriptionEndsAt DateTime?  // When subscription expires
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  stories       Story[]
  media         Media[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  slug        String
  domain      String   // Removed @unique - multiple stories can share same domain
  template    String   @default("timeline")
  isPublic    Boolean  @default(true)
  coverPhoto  String?  // URL to the cover photo
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Story content
  chapters    Chapter[]
  mediaReferences MediaReference[]
  
  // Customization
  settings    StorySettings?
  
  // Ensure slug is unique per user
  @@unique([userId, slug])
}

model StorySettings {
  id              String  @id @default(cuid())
  storyId         String  @unique
  primaryColor    String  @default("#df8548")
  fontFamily      String  @default("serif")
  coverImage      String?
  logoImage       String?
  customCSS       String?
  enableComments  Boolean @default(false)
  enableDownload  Boolean @default(true)
  
  story           Story   @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  content     String?
  date        DateTime?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Story relation
  storyId     String
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  // Chapter media references
  mediaReferences MediaReference[]
  
  @@unique([storyId, order])
}

model Media {
  id          String    @id @default(cuid())
  type        String    // 'image', 'video', 'audio'
  url         String
  thumbnailUrl String?
  title       String?
  description String?
  createdAt   DateTime  @default(now())
  
  // Relations - Media belongs to user only (gallery)
  userId      String    // Owner of the media
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // References to this media from stories/chapters
  references  MediaReference[]
}

model MediaReference {
  id        String   @id @default(cuid())
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  // The media being referenced
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  // Where it's being referenced (story and/or chapter)
  storyId   String?
  story     Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  // Ensure we don't have duplicate references
  @@unique([mediaId, storyId, chapterId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    String
  email     String?
  storyId   String
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)
}
